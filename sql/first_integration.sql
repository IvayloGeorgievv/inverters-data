CREATE WAREHOUSE PIPELINES_WH;

USE WAREHOUSE PIPELINES_WH;

CREATE DATABASE INVERTERS_DB;

USE DATABASE INVERTERS_DB;

CREATE SCHEMA INVERTERS_MONITORING;

USE SCHEMA INVERTERS_MONITORING;

CREATE TABLE INVERTER_DATA_RAW (
    FILE_NAME STRING,
    JSON_BODY STRING,
    FILE_CONTENT_KEY STRING,
    FILE_LAST_MODIFIED TIMESTAMP_TZ,
    START_SCAN_TIME TIMESTAMP_TZ
);

CREATE FILE FORMAT JSON_FORMAT 
    TYPE = 'JSON'
    COMPRESSION = 'AUTO';


CREATE OR REPLACE STAGE INVERTERS_DATA_RAW_STAGE
    URL = 's3://invertors-data-test/'
    STORAGE_INTEGRATION = SNOWFLAKE_SI_INTEGRATION
    FILE_FORMAT = JSON_FORMAT;


CREATE PIPE INVERTER_DATA_RAW_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO INVERTER_DATA_RAW(FILE_NAME, JSON_BODY, FILE_CONTENT_KEY, FILE_LAST_MODIFIED, START_SCAN_TIME)
FROM (
    SELECT
        METADATA$FILENAME AS FILE_NAME,
        $1 AS JSON_BODY,
        METADATA$FILE_CONTENT_KEY AS FILE_CONTENT_KEY,
        CONVERT_TIMEZONE('UTC', METADATA$FILE_LAST_MODIFIED) AS FILE_LAST_MODIFIED,
        CONVERT_TIMEZONE('UTC', METADATA$START_SCAN_TIME) AS START_SCAN_TIME
    FROM @INVERTERS_DATA_RAW_STAGE/inverter_data/
)
FILE_FORMAT = JSON_FORMAT;

SHOW PIPES; 

CREATE OR REPLACE TABLE STG_INVERTER_DATA_STRUCTURED (
    ID STRING,
    PAC FLOAT,
    ENERGY_OUTPUT FLOAT,
    ENERGY_CONVERSION_EFFICIENCY FLOAT,
    PERFORMANCE_RATIO FLOAT,
    SYSTEM_UPTIME FLOAT,
    TEMPERATURE FLOAT,
    FAULT_STATUS STRING,
    INPUT_VOLTAGE FLOAT,
    OUTPUT_VOLTAGE FLOAT,
    FREQUENCY FLOAT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE STREAM INVERTER_DATA_RAW_STREAM
ON TABLE INVERTER_DATA_RAW
APPEND_ONLY = TRUE;

CREATE TASK PROCESS_INVERTER_DATA
WAREHOUSE = PIPELINES_WH
SCHEDULE = '20 SECONDS'
WHEN SYSTEM$STREAM_HAS_DATA('INVERTER_DATA_RAW_STREAM')
AS 
INSERT INTO STG_INVERTER_DATA_STRUCTURED (
    ID, PAC, ENERGY_OUTPUT, ENERGY_CONVERSION_EFFICIENCY, PERFORMANCE_RATIO,
    SYSTEM_UPTIME, TEMPERATURE, FAULT_STATUS, INPUT_VOLTAGE, OUTPUT_VOLTAGE, FREQUENCY
)
SELECT
    f.value:id::STRING AS ID,
    f.value:PAC::FLOAT AS PAC,
    f.value:energy_output::FLOAT as ENERGY_OUTPUT,
    f.value:energy_conversion_efficiency::FLOAT as ENERGY_CONVERSION_EFFICIENCY,
    f.value:performance_ratio::FLOAT AS PERFORMANCE_RATIO,
    f.value:system_uptime::FLOAT AS SYSTEM_UPTIME,
    f.value:temperature::FLOAT AS TEMPERATURE,
    f.value:fault_status::STRING AS FAULT_STATUS,
    f.value:input_voltage::FLOAT AS INPUT_VOLTAGE,
    f.value:output_voltage::FLOAT AS OUTPUT_VOLTAGE,
    f.value:frequency::FLOAT AS FREQUENCY
FROM INVERTER_DATA_RAW_STREAM r,
LATERAL FLATTEN(input => PARSE_JSON(r.json_body)) f;

ALTER TASK PROCESS_INVERTER_DATA RESUME;




SELECT *
FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())
WHERE name = 'PROCESS_INVERTER_DATA'
 AND scheduled_time >= '2025-04-07 03:50:00.000'
ORDER BY scheduled_time ASC;


LIST @INVERTERS_DATA_RAW_STAGE;

SELECT * FROM INVERTER_DATA_RAW;

SELECT * FROM INVERTER_DATA_RAW_STREAM;

SELECT * FROM STG_INVERTER_DATA_STRUCTURED;








TRUNCATE STG_INVERTER_DATA_STRUCTURED;

TRUNCATE INVERTER_DATA_RAW;