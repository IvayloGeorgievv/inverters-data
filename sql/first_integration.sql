
CREATE OR REPLACE TABLE INVERTER_DATA_RAW(
    FILE_NAME STRING,
    JSON_BODY VARIANT, 
    FILE_CONTENT_KEY STRING,
    FILE_LAST_MODIFIED TIMESTAMP_TZ,
    START_SCAN_TIME TIMESTAMP_TZ
);

CREATE OR REPLACE FILE FORMAT JSON_FORMAT 
    TYPE = 'JSON'
    COMPRESSION = 'AUTO';

CREATE OR REPLACE STAGE INVERTERS_STAGE_RAW
    URL = 's3://invertors-data-test/'
    STORAGE_INTEGRATION = SNOWFLAKE_SI_INTEGRATION
    FILE_FORMAT = JSON_FORMAT;

CREATE OR REPLACE PIPE INVERTER_DATA_RAW_PIPE
AUTO_INGEST = TRUE
AS 
COPY INTO INVERTER_DATA_RAW(FILE_NAME, JSON_BODY, FILE_CONTENT_KEY, FILE_LAST_MODIFIED, START_SCAN_TIME)
FROM (
    SELECT
        METADATA$FILENAME AS FILE_NAME,
        PARSE_JSON($1) AS JSON_BODY,
        METADATA$FILE_CONTENT_KEY AS FILE_CONTENT_KEY,
        CONVERT_TIMEZONE('UTC', METADATA$FILE_LAST_MODIFIED) AS FILE_LAST_MODIFIED,
        CONVERT_TIMEZONE('UTC', METADATA$START_SCAN_TIME) AS START_SCAN_TIME
    FROM @INVERTERS_STAGE_RAW/inverter_data/)
FILE_FORMAT = JSON_FORMAT;

SHOW PIPES;

LIST @INVERTERS_STAGE_RAW;

SELECT * FROM @INVERTERS_STAGE_RAW/inverter_data/;

SELECT * FROM INVERTER_DATA_RAW;
                                                                                                            --America/Los_Angeles
SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, METADATA$FILE_CONTENT_KEY, METADATA$FILE_LAST_MODIFIED, METADATA$START_SCAN_TIME FROM @INVERTERS_STAGE_RAW/inverter-test/;

SHOW PARAMETERS LIKE 'TIMEZONE';

select * from INVERTER_DATA_RAW

CREATE TABLE PROCESSED_FILES (
    FILE_CONTENT_KEY STRING UNIQUE,
    FILE_NAME STRING,
    FILE_LAST_MODIFIED TIMESTAMP_TZ,
    START_SCAN_TIME TIMESTAMP_TZ
);

CREATE TABLE STG_INVERTER_DATA_STRUCTURED (
    ID STRING,
    PAC FLOAT,
    ENERGY_OUTPUT FLOAT,
    ENERGY_CONVERSION_EFFICIENCY FLOAT,
    PERFORMANCE_RATIO FLOAT,
    SYSTEM_UPTIME FLOAT,
    TEMPERATURE FLOAT,
    FAULT_STATUS STRING,
    INPUT_VOLTAGE FLOAT,
    OUTPUT_VOLTAGE FLOAT,
    FREQUENCY FLOAT
);

CREATE OR REPLACE STREAM INVERTER_DATA_RAW_STREAM
ON TABLE INVERTER_DATA_RAW
APPEND_ONLY=TRUE;


CREATE OR REPLACE TASK INVERTER_DATA_TRANSFER_TASK 
WAREHOUSE = PIPELINES_WH
AFTER INSERT ON INVERTER_DATA_RAW
WHEN SYSTEM$STREAM_HAS_DATA('INVERTER_DATA_RAW_STREAM')
AS
$$
BEGIN
        -- Insert metadata into the processed files table if not already present
    INSERT INTO PROCESSED_FILE_CONTENT_KEYS (FILE_CONTENT_KEY, FILE_NAME, FILE_LAST_MODIFIED, START_SCAN_TIME)
    SELECT DISTINCT FILE_CONTENT_KEY, FILE_NAME, FILE_LAST_MODIFIED, START_SCAN_TIME
    FROM INVERTER_DATA_RAW_STREAM
    WHERE FILE_CONTENT_KEY IS NOT NULL 
    AND FILE_CONTENT_KEY NOT IN (SELECT FILE_CONTENT_KEY FROM PROCESSED_FILE_CONTENT_KEYS);

    -- Insert structured data into the structured table
    INSERT INTO INVERTER_DATA_STRUCTURED (ID, PAC, ENERGY_OUTPUT, ENERGY_CONVERSION_EFFICIENCY, PERFORMANCE_RATIO, SYSTEM_UPTIME, TEMPERATURE, FAULT_STATUS, INPUT_VOLTAGE, OUTPUT_VOLTAGE, FREQUENCY)
    SELECT
        JSON_BODY:id::STRING AS ID,
        JSON_BODY:PAC::FLOAT AS PAC,
        JSON_BODY:energy_output::FLOAT AS ENERGY_OUTPUT,
        JSON_BODY:energy_conversion_efficiency::FLOAT AS ENERGY_CONVERSION_EFFICIENCY,
        JSON_BODY:performance_ratio::FLOAT AS PERFORMANCE_RATIO,
        JSON_BODY:system_uptime::FLOAT AS SYSTEM_UPTIME,
        JSON_BODY:temperature::FLOAT AS TEMPERATURE,
        JSON_BODY:fault_status::STRING AS FAULT_STATUS,
        JSON_BODY:input_voltage::FLOAT AS INPUT_VOLTAGE,
        JSON_BODY:output_voltage::FLOAT AS OUTPUT_VOLTAGE,
        JSON_BODY:frequency::FLOAT AS FREQUENCY
    FROM INVERTER_DATA_RAW_STREAM
    WHERE FILE_CONTENT_KEY IS NOT NULL
    AND FILE_CONTENT_KEY IN (
        SELECT FILE_CONTENT_KEY 
        FROM PROCESSED_FILE_CONTENT_KEYS
    );

    RETURN 'Success';
END;
$$;
